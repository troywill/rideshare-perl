#!/usr/bin/env perl

#################################################################
#
# daemon.pl                                         
# Programmer: Shawn Holland
# I am not responsible for anything.
#
#################################################################

use POSIX qw(setsid);
my $proc;
my $error;
my $file = "daemon.pl";
my $pidfile = ">/var/run/daemon.pid";
my $pid2check = "/var/run/daemon.pid";
my $pid;

use warnings;
use strict;
use IO::Socket::INET6;
use JSON; 
###### path-block ############
use FindBin qw($Bin);        #
use File::Basename;          #
use lib "$Bin/../lib";       #
require "globalsat-perl.pm"; #
##############################
###### begin configuration-block ########### 
use AppConfig;                               
                                             
# create a new AppConfig object              
my $config = AppConfig->new;                 
                                             
# define a new variable                      
# $config->define('LOCAL_DATABASE=s');       
$config->define("VAR1=s");                   
                                             
# read configuration file                    
                                             
$config->file("$Bin/../conf/globalsat-perl.conf");            
                                             
my $VAR1 = $config->get("VAR1");             
############ end configuration-block ####### 
#### BEGIN GETOPTIONS BLOCK
use Getopt::Long;
my ($verbose, $help, $calibrate); #flags
my $zoom;
my $screenshot;

GetOptions ("zoom=i" => \$zoom,            # numeric
            "screenshot=s"   => \$screenshot, # string
            "verbose"  => \$verbose,       # flag
            "help"     => \$help )       # flag
    or die("Error in command line arguments\n");
#### END GETOPTIONS BLOCK
     

my $gpsd_socket = new IO::Socket::INET6 (
    PeerAddr => 'localhost',
    PeerPort => '2947',
    Proto => 'tcp',
    Blocking => 1
    ) or die "Could not create socket: $!\n";

$gpsd_socket->send('?WATCH={"enable":true,"json":true}');
use DBI;

#Make it a daemon
$proc = Daemonize();

my $dbh = DBI->connect("dbi:Pg:dbname=rideshare","troy","");

if (!$error) {
    LogMessage("$file : PID $proc : Begin");
}

#Write Pid Information
if (!$error) {
    if (-e $pid2check) {
        LogMessage("$file : PID File $pid2check already exists. Exiting");
        exit(0);
    } else {
        unless (open (FILE, $pidfile)) {
            $error .= "Error opening file for writing " . $!;
        }
    }
}
if (!$error) {
    LogMessage("$file : PID $proc : Writing pid information to $pidfile");
    print FILE $proc . "\n";
    close (FILE);
}


use warnings;
use strict;
use IO::Socket::INET6;
use JSON; 

#Main loop of Daemon
# while (!$error) {
#     sleep(1);
#     LogMessage("Hello World");
# }
while ( my $json_line = <$gpsd_socket> ) {

  my $hashref = decode_json($json_line);
  my %hash = %$hashref;

  my $class = $hash{'class'};

  if ( $class eq 'TPV' ) {
      my ($mode,$time,$ept,$lat,$lon,$alt,$epx,$epy,$epv,$track,$speed,$climb,$epd,$eps,$epc) =
          @hash{'mode','time','ept','lat','lon','alt','epx','epy','epv','track','speed','climb','epd','eps','epc'};
      # print "time: $time\nept: $ept\nlat: $lat\nlon: $lon\nalt: $alt\nepx: $epx\nepy: $epy\nepv: $epv\ntrack: $track\nspeed: $speed\nclimb: $climb\nepd: $epd\neps: $eps\nepc: $epc\n";
      $speed *= 2.23694; # meters per second to miles per hour
      $speed = sprintf("%d", $speed);
      $track = sprintf("%d", $track);
      my $name = "";
      my $sql_statement = "INSERT INTO gpspoint VALUES(DEFAULT,\'$time\',\'$name\',$lat,$lon,$epx,$epy,$epv,$speed,$track)";
      my $rv = $dbh->do($sql_statement);
  }
}
#End Main loop of Daemon


if ($error) {
    LogMessage("$file : PID $proc : Error $error");
}

LogMessage("$file : PID $proc : END");

exit(0);

#
#Subs
#
#################################################################
#
#       Daemonize
#
#################################################################
#       
#       Used to make this program a daemon
#       Also to redirect STDIN, STDERR, STDOUT
#       Returns PID
#
#################################################################
sub Daemonize {

    unless (chdir '/') {
        $error .= "Can't chdir to /: $!";
    }
    unless (umask 0) {
        $error .= "Unable to umask 0";
    }

    unless (open STDIN, '/dev/null') {
        $error .= "Can't read /dev/null: $!";
    }

    #All print statments will now be sent to our log file
    unless (open STDOUT, '>>/var/log/daemon.log') {
        $error .= "Can't read /var/log/daemon.log: $!";
    }
    #All error messages will now be sent to our log file
    unless (open STDERR, '>>/var/log/daemon.log') {
        $error .= "Can't write to /var/log/daemon.log: $!";
    }

    defined($pid = fork);
    #Exit if $pid exists (parent)
    exit(0) if $pid;

    #As Child
    setsid();
    $proc = $$;
    return ($proc);
}

#################################################################
#
#       LogMessage
#
#################################################################
#
#       Used to log messages 
#
#################################################################
sub LogMessage {
    my $message = $_[0];
    print localtime() . " $message\n";
}
